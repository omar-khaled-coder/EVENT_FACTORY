<h2 class="login-title">Log in</h2>

<div class="login-form-container">
  <%= simple_form_for(resource, as: resource_name, url: session_path(resource_name), html: { id: 'login-form' }) do |f| %>

    <!-- Display error messages in a similar style to JS -->
    <div id="email-server-error" class="error-message" style="display: none;">Invalid email or password.</div>

    <div class="form-inputs">
      <div class="form-group">
        <%= f.input :email,
                    required: true,
                    autofocus: true,
                    input_html: { autocomplete: "email", class: 'form-control', placeholder: 'Email' } %>
        <div id="email-error" class="error-message" style="display:none;">Please enter your email.</div>
        <div id="email-format-error" class="error-message" style="display:none;">Please enter a valid email address.</div>
      </div>

      <div class="form-group">
        <%= f.input :password,
                    required: true,
                    input_html: { autocomplete: "current-password", class: 'form-control', placeholder: 'Password' } %>
        <div id="password-error" class="error-message" style="display:none;">Please enter your password.</div>
        <div id="password-length-error" class="error-message" style="display:none;">Password must be at least 6 characters long.</div>
      </div>

      <%= f.input :remember_me, as: :boolean, label: "Remember me", input_html: { class: 'form-check-input' } if devise_mapping.rememberable? %>
    </div>

    <div class="form-actions">
      <%= f.button :submit, "Log in", class: 'btn btn-primary btn-lg btn-block' %>
    </div>
  <% end %>

  <div class="login-links">
    <%= render "devise/shared/links" %>
  </div>
</div>

<!-- JavaScript for client-side validation -->
<script>
  document.getElementById('login-form').addEventListener('submit', function(event) {
    // Get input fields
    const emailField = document.querySelector('input#user_email');
    const passwordField = document.querySelector('input#user_password');

    // Get error divs
    const emailError = document.getElementById('email-error');
    const emailFormatError = document.getElementById('email-format-error');
    const passwordError = document.getElementById('password-error');
    const passwordLengthError = document.getElementById('password-length-error');
    const emailServerError = document.getElementById('email-server-error');

    // Hide error messages initially
    emailError.style.display = 'none';
    emailFormatError.style.display = 'none';
    passwordError.style.display = 'none';
    passwordLengthError.style.display = 'none';
    emailServerError.style.display = 'none';

    // Initialize validation flag
    let isValid = true;

    // Check if email is empty
    if (!emailField.value) {
      emailError.style.display = 'block';
      isValid = false;
    } else {
      // Validate email format
      const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailPattern.test(emailField.value)) {
        emailFormatError.style.display = 'block';
        isValid = false;
      }
    }

    // Check if password is empty
    if (!passwordField.value) {
      passwordError.style.display = 'block';
      isValid = false;
    } else {
      // Check password length (must be at least 6 characters)
      if (passwordField.value.length < 6) {
        passwordLengthError.style.display = 'block';
        isValid = false;
      }
    }

    // Prevent form submission if validation fails
    if (!isValid) {
      event.preventDefault();
    }
  });

  // Capture server-side errors (for incorrect credentials)
  document.addEventListener('DOMContentLoaded', function() {
    const serverErrors = "<%= resource.errors.full_messages_for(:email).join(',') %>";
    const emailServerError = document.getElementById('email-server-error');

    if (serverErrors !== '') {
      emailServerError.style.display = 'block'; // Show the server error message if any
      emailServerError.innerText = serverErrors; // Set the message
    }
  });
</script>
